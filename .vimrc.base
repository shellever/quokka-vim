" switch off Vi-compatible, use the Vim defaults
set nocompatible

" enable syntax highlighting
syntax on
" enable file type detection
filetype on
" enable loading the indent/plugin files for specific file types
filetype indent on
filetype plugin on

" don't use a swapfile for the buffer
set noswapfile
" don't make a backup before overwriting a file
set nobackup
set nowritebackup

" don't ring the bell for error messages
set noerrorbells
" don't use visual bell
set novisualbell
set visualbell t_vb=

" show line numbers 
set number
" show the line and column number of the cursor position
set ruler
" determinie the content of the ruler string 
"set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)
" show status line
set laststatus=2
" statusline format {
" clear the previous
let &statusline = ""
" file path
let &statusline .= "%<%F "
" readonly, modified, modifiable flags in brackets
let &statusline .= "%([%R%M]%) "
" right-align everything past this point
let &statusline .= "%= "
" file type (eg. python, text, etc...)
let &statusline .= "%(ft=%{&filetype}%) " . "| "
" file format (eg. unix, dos, etc...)
let &statusline .= "%(ff=%{&fileformat}%) " . "| "
" file encoding (eg. utf-8, latin1, etc...)
let &statusline .= "%(fe=%{&fileencoding}%) " . "| "
" current char in cursor, ascii and hexadecimal
let &statusline .= "%(cc=%b/0x%B%) " . "| "
" current position in cursor
let &statusline .= "%(cp=%l,%v%) " . "| "
" percentage and total lines
let &statusline .= "%(pl=%p%%/%L%) "
" }
" show partial command in the last line of the screen
set showcmd
" show the current mode
set showmode

" enable the use of the mouse for all previous modes
set mouse=a

" don't wrap lines longer than the width of the window
" and display continues on the next line.
set nowrap

" indent settings {
" use the appropriate number of spaces to insert a <Tab>
set expandtab
" use 4 number of spaces that a <Tab> in the file counts for
set tabstop=4
" when on, a <Tab> in front of a line inserts blanks according to 
" 'shifwidth', 'tabstop' or 'softtabstop' is used in other places.
set smarttab
set shiftround
set shiftwidth=4
set softtabstop=4
" when 'smartindent' or 'cindent' is on, 
" the indent is changed in a different way.
set autoindent
set smartindent
set cindent
" }

" on by default
set backspace=indent,eol,start

" keep minimal number when scrolling
" vertically
set scrolloff=3
" horizontally
set sidescrolloff=6

" jump to the matching one when a bracket is inserted
set showmatch
" tenths of a second to show the matching paren (1/10s=100ms)
set matchtime=1

" ignore the case of normal letters
set ignorecase
" ignore case when the pattern contains lowercase letters only
set smartcase
" highlight all search matches
set hlsearch
" do incremental searching
set incsearch

" cmdline-history
set history=936

" jump to the last position when reopening a file
" for details, see /etc/vim/vimrc in 27-31 lines
if has("autocmd")
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g'\"" | endif
endif


" == abbreviations
iabbrev tblog http://shellever.com
iabbrev temail shellever@163.com
iabbrev tcopy Copyright 2018 Shellever, all rights reserved.


" == mappings
" define a mapping for the special string <Leader>
let mapleader = ","
" vimrc edit {
nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>
" }

" escape from insert mode 
inoremap jk <Esc>
"inoremap <Esc> <nop>

" stop the highlighting 
nnoremap <Leader>hl :nohlsearch<CR>

" view the help for the word nearest to the cursor
nnoremap <Leader>H :execute ":help " . expand("<cword>")<CR>

" toggle fold, when in vimdiff
nnoremap <Space> za

